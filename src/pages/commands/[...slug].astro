---
import { getCollection } from "astro:content";
import Layout from "../../layouts/Layout.astro";
import { format } from "date-fns";

export async function getStaticPaths() {
    const commands = await getCollection("commands");
    return commands.map((command) => ({
        params: { slug: command.slug },
        props: { command },
    }));
}

const { command } = Astro.props;
const { Content } = await command.render();

// Get previous and next commands for navigation
const allCommands = await getCollection("commands");
const sortedCommands = allCommands.sort(
    (a, b) => b.data.date.valueOf() - a.data.date.valueOf(),
);
const currentIndex = sortedCommands.findIndex((c) => c.slug === command.slug);
const prevCommand =
    currentIndex < sortedCommands.length - 1
        ? sortedCommands[currentIndex + 1]
        : null;
const nextCommand = currentIndex > 0 ? sortedCommands[currentIndex - 1] : null;
---

<Layout title={`${command.data.title} - Tim Cane`}>
    <article class="container mx-auto px-4 py-8 max-w-3xl">
        <div class="bg-white border border-gray-100 rounded-2xl p-8 mb-8">
            <header class="mb-12">
                <div
                    class="flex flex-wrap items-center gap-2 text-sm text-gray-500 mb-4"
                >
                    <time
                        datetime={command.data.date.toISOString()}
                        class="flex items-center gap-1"
                    >
                        <svg
                            class="w-4 h-4"
                            fill="none"
                            stroke="currentColor"
                            viewBox="0 0 24 24"
                        >
                            <path
                                stroke-linecap="round"
                                stroke-linejoin="round"
                                stroke-width="2"
                                d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"
                            ></path>
                        </svg>
                        {format(command.data.date, "MMMM d, yyyy")}
                    </time>
                    <span>•</span>
                    <span class="flex items-center gap-1">
                        <svg
                            class="w-4 h-4"
                            fill="none"
                            stroke="currentColor"
                            viewBox="0 0 24 24"
                        >
                            <path
                                stroke-linecap="round"
                                stroke-linejoin="round"
                                stroke-width="2"
                                d="M10 20l4-16m4 4l4 4-4 4M6 16l-4-4 4-4"
                            ></path>
                        </svg>
                        {command.data.codeSnippets} snippets
                    </span>
                    <span>•</span>
                    <span class="flex items-center gap-1">
                        <svg
                            class="w-4 h-4"
                            fill="none"
                            stroke="currentColor"
                            viewBox="0 0 24 24"
                        >
                            <path
                                stroke-linecap="round"
                                stroke-linejoin="round"
                                stroke-width="2"
                                d="M7 8h10M7 12h4m1 8l-4-4H5a2 2 0 01-2-2V6a2 2 0 012-2h14a2 2 0 012 2v8a2 2 0 01-2 2h-3l-4 4z"
                            ></path>
                        </svg>
                        {command.data.aiPromptCount} prompts
                    </span>
                </div>

                <h1 class="text-4xl font-bold mb-6 animated-gradient-text">
                    {command.data.title}
                </h1>

                <p class="text-xl text-gray-600 mb-6">
                    {command.data.summary}
                </p>

                <div class="flex flex-wrap gap-2 mb-6">
                    {
                        command.data.tags.map((tag) => (
                            <span class="px-3 py-1 bg-gray-50 text-gray-600 rounded-full text-sm">
                                {tag}
                            </span>
                        ))
                    }
                </div>

                <div class="bg-gray-50 rounded-lg p-6 space-y-4">
                    <div class="flex items-center gap-2">
                        <span class="font-semibold">Files Changed:</span>
                        <span class="text-gray-600"
                            >{command.data.filesChanged.length}</span
                        >
                    </div>
                    <ul class="list-disc list-inside text-gray-600 space-y-1">
                        {
                            command.data.filesChanged.map((file) => (
                                <li class="hover:text-gray-900">{file}</li>
                            ))
                        }
                    </ul>
                </div>
            </header>

            <div
                class="prose prose-lg max-w-none prose-headings:font-bold prose-headings:text-gray-900 prose-p:text-gray-700 prose-a:text-blue-600 prose-a:no-underline hover:prose-a:underline prose-code:text-gray-800 prose-code:bg-gray-100 prose-code:rounded prose-code:px-1 prose-code:py-0.5 prose-pre:bg-gray-900 prose-pre:text-gray-100 prose-pre:p-4 prose-pre:rounded-lg prose-pre:code:bg-transparent prose-pre:code:p-0 prose-strong:text-gray-900 prose-blockquote:border-gray-300 prose-blockquote:text-gray-700 prose-blockquote:italic"
            >
                <Content />
            </div>
        </div>

        <nav class="bg-white border border-gray-100 rounded-2xl p-6">
            <div class="flex justify-between items-center">
                {
                    prevCommand && (
                        <a
                            href={`/commands/${prevCommand.slug}`}
                            class="group flex items-center gap-2 text-gray-600 hover:text-gray-900"
                        >
                            <svg
                                class="w-5 h-5 transition-transform group-hover:-translate-x-1"
                                fill="none"
                                stroke="currentColor"
                                viewBox="0 0 24 24"
                            >
                                <path
                                    stroke-linecap="round"
                                    stroke-linejoin="round"
                                    stroke-width="2"
                                    d="M15 19l-7-7 7-7"
                                />
                            </svg>
                            <span class="group-hover:underline">
                                {prevCommand.data.title}
                            </span>
                        </a>
                    )
                }
                {
                    nextCommand && (
                        <a
                            href={`/commands/${nextCommand.slug}`}
                            class="group flex items-center gap-2 text-gray-600 hover:text-gray-900 ml-auto"
                        >
                            <span class="group-hover:underline">
                                {nextCommand.data.title}
                            </span>
                            <svg
                                class="w-5 h-5 transition-transform group-hover:translate-x-1"
                                fill="none"
                                stroke="currentColor"
                                viewBox="0 0 24 24"
                            >
                                <path
                                    stroke-linecap="round"
                                    stroke-linejoin="round"
                                    stroke-width="2"
                                    d="M9 5l7 7-7 7"
                                />
                            </svg>
                        </a>
                    )
                }
            </div>
        </nav>
    </article>
</Layout>

<style>
    .prose {
        @apply text-gray-700;
    }
    .prose h1,
    .prose h2,
    .prose h3,
    .prose h4 {
        @apply text-gray-900;
    }
    .prose code {
        @apply text-sm bg-gray-50 px-1 py-0.5 rounded;
    }
    .prose pre code {
        @apply bg-transparent p-0;
    }
</style>
